.code
_trigger_br PROC
	; Put the param address into rcx:edx
	; rdx will automatically get truncated
	; to its lower 32 bits when switching to 32-bit mode
	mov		rdx, rcx
	and		rdx, 0ffffffffh
	shr		rdx, 20h

	; Switch to 32-bit compatibility mode
	call	$ + 5
__prev_addr:
	mov		DWORD PTR [rsp + 4h], 23h
	add		DWORD PTR [rsp], __x86_code - __prev_addr

	; AMD compatibility
	push	rax
	mov		ax, 2bh
	mov		ss, ax
	pop		rax

	; 32-bit code begins here
	db		0cbh							; retf
	
__x86_code:
	; Push the two halves of the param addr onto the stack
	db 51h									; push ecx
	db 52h									; push edx

	; Trigger #BR
	; The kernel will catch the int 5 generated by bound di
	; and adjust our eip so we continue without crashing
	db		6ah, 0ffh						; push -1
	db		66h, 31h, 0ffh					; xor di, di
	db		66h, 62h, 03ch, 24h				; bound di, DWORD PTR [esp]
	db		83h, 0c4h, 0ch					; add esp, 0ch

	; 32-bit code stops here
	db		6ah, 33h						; push 33h
	db		0e8h, 0h, 0h, 0h, 0h			; call $ + 5
	db		83h, 4h, 24h, 5h				; add DWORD PTR [esp], 5
	db		0cbh							; retf
	
	ret
_trigger_br ENDP


END